// Luscious
// @since v0.0.2
//
// Make Sass color functions dynamic
//
// sass-lint:disable no-css-comments
// ===================================================================


// Helper for other color functions/mixins
// Used internally in Luscious
@function color_mix($mix: 'info', $color: null, $amount: null) {
	$info-text: info(
	'color_mix', 'function', 'internal',
  $details: 'Internal function used in other color utilities in Luscious.
  Makes it easier to mix colors while adding debugging helpful info.
  - Params: (all 3 are required)
    - $mix   : The type of color function you want to do
    - $color : The color you want to mix
    - $amount: How much the mixture should be'
	);
	@if $mix == 'info' {
		@debug $info-text;
		@return null;
	}

	@else {
		$mix_with: ();
		@if type-of($color) != color {
			@debug '`#{$color}` is not a color.';
			@debug $info-text;
			@return null;

		} @else if type-of($amount) != number or unit($amount) != '%' {
			@debug '`#{$amount}` is not a number percent.';
			@debug $info-text;
			@return null;

		} @else {

			@if $mix == 'tint' { $mix_with: #fff; }
			@if $mix == 'shade' { $mix_with: #000; }
			@if $mix == 'tone' { $mix_with: #808080; }

			@return mix($mix_with, $color, $amount);
		}
	}
}

// -------------------------------------

// # Tint Function
// Mixes a color with white.
// ref: http://bourbon.io/docs/#tint-shade
@function tint($color: 'info', $amount: null) {
	$info-text: info(
	'tint', 'function', 'color',
  $details: 'Mixes the given color with `white` by the percentage
  amount that you specify.
  - Params: (both are required)
    - $color : The color you want to mix
    - $amount: The percentage of `white` that the resulting
    -          color should have.
  - CSS Input:
    - color: tint(red, 50%);
    - background: tint(red, 100%);
  - CSS Output:
    - color: #ff8080;
    - background: #ffffff;'
	);
	@if $color == 'info' {
		@debug $info-text;
		@return null;
	}
	@else {
		@return color_mix(tint, $color, $amount);
	}
}

// -------------------------------------

// # Shade
// Mixes a color with black.
// ref: http://bourbon.io/docs/#tint-shade
@function shade($color: 'info', $amount: null) {
	$info-text: info(
	'shade', 'function', 'color',
  $details: 'Mixes the given color with `black` by the percentage
  amount that you specify.
  - Params: (both are required)
    - $color : The color you want to mix
    - $amount: The percentage of `black` that the resulting
    -          color should have.
  - CSS Input:
    - color: shade(red, 50%);
    - background: shade(red, 100%);
  - CSS Output:
    - color: maroon;
    - background: black;'
	);
	@if $color == 'info' {
		@debug $info-text;
		@return null;
	}
	@else {
		@return color_mix(shade, $color, $amount);
	}
}

// -------------------------------------

// # Tone
// Blends a color with another color (mid-gray by default).
@function tone($color: 'info', $amount: null) {
	$info-text: info(
	'tone', 'function', 'color',
  $details: 'Mixes the given color with `gray` by the percentage
  amount that you specify.
  - Params: (both are required)
    - $color : The color you want to mix
    - $amount: The percentage of `gray` that the resulting
    -          color should have.
  - CSS Input:
    - color: tone(red, 50%);
    - background: tone(red, 100%);
  - CSS Output:
    - color: #c04040;
    - background: gray;'
	);
	@if $color == 'info' {
		@debug $info-text;
		@return null;
	}
	@else {
		@return color_mix(tone, $color, $amount);
	}
}

// -------------------------------------

// Make color functions more dynamic so they can be called with a sass
// map or variable.
// TODO: Add input/output usage to info
@function color_function($function: 'info', $color: null, $amount: null) {
	$info-text: info(
	'color_function', 'function', 'color',
  $details: 'A work-around so that you can turn on/off
  color functions from a previously imported file
  by using a variable..
  - Params: (All 3 are required)
  - $function : Accepts: lighten, darken, saturate,
    -           desaturate, adjust-hue, transparentize, rgba,
    -           tint, shade, and tone
    - $color : The color you want to mix. Accepts any color value.
    - $amount: The percentage that the resulting
    -          color should have mixed in.'
	);
	@if $function == 'info' {
		@debug $info-text;
		@return null;
	}

	@if $function == 'tint' {
		@return tint($color, $amount);
	}
	@if $function == 'shade' {
		@return shade($color, $amount);
	}
	@if $function == 'tone' {
		@return tone($color, $amount);
	}
	@if $function == 'lighten' {
		@return lighten($color, $amount);
	}
	@else if $function == 'darken' {
		@return darken($color, $amount);
	}
	@else if $function == 'saturate' {
		@return saturate($color, $amount);
	}
	@else if $function == 'desaturate' {
		@return desaturate($color, $amount);
	}
	@else if $function == 'adjust-hue' or $function == 'adjust_hue' {
		@return adjust-hue($color, $amount);
	}
	@else if $function == 'transparentize' {
		@if unit($amount) == '%' {
			$amount: $amount / 100%;
		}
		@return transparentize($color, $amount);
	}
	@else if $function == 'rgba' {
		@if unit($amount) == '%' {
			$amount: $amount / 100%;
		}
		@return rgba($color, $amount);
	}
	@else {
		@debug '#{$function} is not an available color function';
		@debug $info-text;
		@return null;
	}
}


// ===================================================================
// Tests
// ===================================================================


@mixin __test_tint {
	@if $output_test_message { @debug '[TESTING] `tint`'; }
	/* `tint` --------------------------- */
	/*
	.test.tint {
		color: tint(red, 30%);
	}
	*/
	.test.tint {
		color: tint(#ff0000, 30%);
	}
	/* End `tint` ----------------------- */
}


@mixin __test_shade {
	@if $output_test_message { @debug '[TESTING] `shade`'; }
	/* `shade` -------------------------- */
	/*
	.test.shade {
		color: shade(red, 30%);
	}
	*/
	.test.shade {
		color: shade(#ff0000, 30%);
	}
	/* End `shade` ---------------------- */
}


@mixin __test_tone {
	@if $output_test_message { @debug '[TESTING] `tone`'; }
	/* `tone` --------------------------- */
	/*
	.test.tone {
		color: tone(red, 30%);
	}
	*/
	.test.tone {
		color: tone(#ff0000, 30%);
	}
	/* End `tone` ----------------------- */
}


@mixin __test_color_function {
	@if $output_test_message { @debug '[TESTING] `color_function`'; }
	/* `color_function` ----------------- */
	/*
	.test.color_function {
		color: color_function(tint, red, 30%);
	}
	*/
	.test.color_function {
		color: color_function(tint, #ff0000, 30%);
	}
	/* End `color_function` ------------- */
}
