// Luscious
// @since v0.0.5
//
// Converts numbers to rem/em equivalent
//
// sass-lint:disable no-css-comments
// ===================================================================

// Rem Calculator
@function rem($val) {
	$info-text: info(
	'rem', 'function', 'styles',
  $details: 'Takes a unitless or px number and converts it to
  the rem equivalent based on the $document_font_size.
  Current $document_font_size = #{$document_font_size}
  - Params:
    - $val: [Required] Unitless or px number
  - Aliases: `r()`
  - SCSS Input
  .element {
    font-size: r(18);
  }
  - CSS Output
  .element {
    font-size: 1.8rem;
  }
  ');
	@if $val == 'info' {
		@debug $info-text;
		@return null;
	}

	@else if unit($val) == 'px' or unitless($val) {
		// Get the rembase from font_size in 'settings/base'
		$rembase: ($document_font_size / 100%) * 16;
		// Remove units if they exist
		$unitless: strip_unit($val);
		// Do the math, output a rem
		$remval: ($unitless / $rembase) * 1rem;
		@return $remval;
	}
	@else {
		@debug 'The `rem` function only accepts unitless or px numbers.
		Try passing `info` as the parameter for more info.';
	}
}

// Alias
@function r($val) {
	@return rem($val);
}


// -------------------------------------

// Em Calculator
@function em($val) {
	$info-text: info(
	'em', 'function', 'styles',
  $details: 'Takes a unitless or px number and converts it to
  the em equivalent based on the $document_font_size.
  Current $document_font_size = #{$document_font_size}
  - Params:
    - $val: [Required] Unitless or px number
  - SCSS Input
  .element {
    font-size: em(18);
  }
  - CSS Output
  .element {
    font-size: 1.8em;
  }
  ');
	@if $val == 'info' {
		@debug $info-text;
		@return null;
		}

	@else if unit($val) == 'px' or unitless($val) {
		// Get the embase from font_size in 'settings/base'
		$embase: ($document_font_size / 100%) * 16;
		// Remove units if they exist
		$unitless: strip_unit($val);
		// Do the math, output an em
		$emval: ($unitless / $embase) * 1em;
		@return $emval;
	}
	@else {
		@debug 'The `em` function only accepts unitless or px numbers.
		Try passing `info` as the parameter for more info.';
	}
}


// ===================================================================
// Tests
// ===================================================================

@mixin __test_rem_calc {
	@if $output_test_message { @debug '[TESTING] `rem_calc`'; }
	/* `rem_calc` ----------------------- */
	/*
	.test.rem_calc {
		height: 32px;
		font-size: 3.2rem;
		line-height: 2rem;
		width: rem_calc(32);
	}
	*/
	.test.rem_calc {
		height: 32px;
		font-size: 3.2rem;
		line-height: 2rem;
		width: rem_calc(32);
	}
	/*
	.test.rem {
		height: 32px;
		font-size: 3.2rem;
		line-height: 2rem;
		width: rem(32);
	}
	*/
	.test.rem {
		height: 32px;
		font-size: 3.2rem;
		line-height: 2rem;
		width: rem(32);
	}
	/* End `rem_calc` ------------------- */
}

// Alias
@mixin __test_rem {
	@include __test_rem_calc;
}


@mixin __test_em_calc {
	@if $output_test_message { @debug '[TESTING] `em_calc`'; }
	/* `em_calc` ------------------------ */
	/*
	.test.em_calc {
		height: 32px;
		font-size: 3.2em;
		line-height: 2em;
		width: em_calc(32);
	}
	*/
	.test.em_calc {
		height: 32px;
		font-size: 3.2em;
		line-height: 2em;
		width: em_calc(32);
	}
	/*
	.test.em {
		height: 32px;
		font-size: 3.2em;
		line-height: 2em;
		width: em(32);
	}
	*/
	.test.em {
		height: 32px;
		font-size: 3.2em;
		line-height: 2em;
		width: em(32);
	}
	/* End `em_calc` -------------------- */
}

// Alias
@mixin __test_em {
	@include __test_em_calc;
}
