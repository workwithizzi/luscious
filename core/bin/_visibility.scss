// Luscious
// @since v0.0.4
//
// sass-lint:disable no-css-comments, no-duplicate-properties
// ===================================================================


// Hidden
// Hide from both screen-readers and browsers
@mixin hidden($info: null) {
	$info-text: info(
	'hidden', 'dependent-mixin', 'styles',
  $details: 'Hides the element from both screen
  readers and visual browsers.
  - Params: none
  - CSS Output:
    - display: block;
    - margin-right: auto;
    - margin-left: auto;
  - SCSS Input
  .element {
    @include hidden;
  }
  - CSS Output
  .element {
    display: none !important;
    visibility: hidden;
  }
  ');
	@if $info { @debug $info-text; }

	display: none !important; // sass-lint:disable-line no-important
	visibility: hidden;
}

// -------------------------------------

// Hide Text
@mixin hide_text($info: null) {
	$info-text: info(
	'hide_text', 'dependent-mixin', 'styles',
  $details: 'Hides the text in an element visually
  but keeps it accessible to screen readers. Useful when
  adding additional context to an element for screen-readers.
  Similar to `sr_only` mixin but this only hides the text, not the
  entire element.
  - Params: none
  - SCSS Input
  .element {
    @include hide_text;
  }
  - CSS Output
  .element {
    overflow: hidden;
    text-indent: 101%;
    white-space: nowrap;
  }
  ');
	@if $info { @debug $info-text; }

	overflow: hidden;
	text-indent: 101%;
	white-space: nowrap;
}

// -------------------------------------

// Visually Hidden
// Hide only visually, but have it available for screen-readers
@mixin sr_only($info: null) {
	$info-text: info(
	'sr_only', 'dependent-mixin', 'styles',
  $details: 'Hides the element visually but keeps it
  accessible to screen readers. Useful when adding additional
  context to an element for screen-readers.
  Similar to `hide_text` but hides the entire element.
  - Params: none
  - SCSS Input
    .element {
      @include sr_only;
    }
  - CSS Output
    .element {
      border: 0;
      clip: rect(0 0 0 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }
    .element.focusable:active,
    .element.focusable:focus {
      clip: auto;
      height: auto;
      margin: 0;
      overflow: visible;
      position: static;
      width: auto;
    }
  ');
	@if $info { @debug $info-text; }

	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;

	// Extends the .element class to allow the element to be focusable
	// when navigated to via the keyboard: h5bp.com/p
	&.focusable {
		&:active,
		&:focus {
			clip: auto;
			height: auto;
			margin: 0;
			overflow: visible;
			position: static;
			width: auto;
		}
	}


}

// -------------------------------------

// Invisible
// Hide visually and from screen-readers, but maintains layout
@mixin invisible($info: null) {
	$info-text: info(
	'invisible', 'dependent-mixin', 'styles',
  $details: 'Hides the an element both visually
  and from screen-readers.
  Similar to `hidden` mixin, but maintains the layout.
  - Params: none
  - SCSS Input
  .element {
    @include invisible;
  }
  - CSS Output
  .element {
    visibility: hidden;
  }
  ');
	@if $info { @debug $info-text; }

	visibility: hidden;
}

// -------------------------------------

// Show
@mixin show($info: null) {
	$info-text: info(
	'show', 'dependent-mixin', 'styles',
  $details: 'Reverses the affects of the `hidden` and `invisible`
  mixins. Useful for showing an element that was previously hidden.
  - Params: none
  - SCSS Input
  .element {
    @include show;
  }
  - CSS Output
  .element {
    display: block !important;
    visibility: visible;
  }
  ');
	@if $info { @debug $info-text; }

	display: block !important; // sass-lint:disable-line no-important
	visibility: visible;
}



// ===================================================================
// Tests
// ===================================================================

@mixin __test_hidden {
	@if $output_test_message { @debug '[TESTING] `hidden`'; }
	/* `hidden` ------------------------- */
	/*
	.test.hidden {
		@include hidden;
	}
	*/
	.test.hidden {
		@include hidden;
	}
	/* End `hidden` --------------------- */
}


@mixin __test_hide_text {
	@if $output_test_message { @debug '[TESTING] `hide_text`'; }
	/* `hide_text` ---------------------- */
	/*
	.test.hide_text {
		@include hide_text;
	}
	*/
	.test.hide_text {
		@include hide_text;
	}
	/* End `hide_text` ------------------ */
}


@mixin __test_sr_only {
	@if $output_test_message { @debug '[TESTING] `sr_only`'; }
	/* `sr_only` ----------------- */
	/*
	.test.sr_only {
		@include sr_only;
	}
	*/
	.test.sr_only {
		@include sr_only;
	}
	/* End `sr_only` ------------- */
}


@mixin __test_invisible {
	@if $output_test_message { @debug '[TESTING] `invisible`'; }
	/* `invisible` ---------------------- */
	/*
	.test.invisible {
		@include invisible;
	}
	*/
	.test.invisible {
		@include invisible;
	}
	/* End `invisible` ------------------ */
}


@mixin __test_show {
	@if $output_test_message { @debug '[TESTING] `show`'; }
	/* `show` --------------------------- */
	/*
	.test.show {
		@include show;
	}
	*/
	.test.show {
		@include show;
	}
	/* End `show` ----------------------- */
}


@mixin __test_visibility_utility_classes {
	@if $output_test_message { @debug '[TESTING] `visibility_utility_classes`'; }
	/* `visibility_utility_classes` ----------- */
	/*
	@include visibility_utility_classes;
	*/
	@include visibility_utility_classes;
	/* End `visibility_utility_classes` ------- */
}
