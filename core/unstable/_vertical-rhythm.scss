// Vertical Rhythm Functions
// ------------------------------------------------------------------
// TODO: Add info, notes, feedback, and tests.

// -------------------------------------
// Settings (to add to settings.scss
// -------------------------------------

// Baseline Height
// Used for vertical rhythm and baseline grids
// 2DO-YG: Test and add info - Possibly go back to using rem units
$base_line_height: 24px !default;

// Used for vertical rhythm (with baseline grids)
// Incremental steps for vr
// 2DO-YG: Test and add info - Possibly go back to using rem units
$baseline-grid: 8px !default;


// ------------------------------------
// Classic Vertical-Rhythm Function
// ------------------------------------
@function vr-classic($val: base) {
	// Calculate the base vertical-rhythm
	$base: convert_rem_ratio($base_line_height) * $base_font_size;

	$info-text: info(
	'vr-classic', 'function', 'styles',
  $details: 'EXPERIMENTAL FUNCTION! DO NOT USE!
  Takes a unitless number and calculates the vertical-rhythm
  for the element using $base_font_size and $base_line_height
  $base_font_size:   #{$base_font_size}
  $base_line_height: #{$base_line_height}
  - Params:
    - $val: Defaults to `base` ($base_font_size * $base_line_height)
            Only accepts a unitless number
  - SCSS Input:
    .element {
      line-height: vr-classic(1);
    }
  - CSS Output:
    .element {
      line-height: 7.68rem;
    }
  ');
	@if $val == 'info' {
		@debug $info-text;
		@return 1000px;

	// Make sure $base_font_size is unitless
	} @else if unitless($base_font_size) {
		@debug info-log('Your base font size CANNOT be a unitless number.'
		'Current value is (#{$base_font_size})'
		'@SEE: variable `$base_font_size`');
		@return 1000px;

	// Return the base vertical-rhythm
	} @else if $val == 'base' or $val == 0 {
		@return $base;

	// If $val is any other number & unitless:
	} @else if is-number($val) {
		@if unitless($val) {
			$step: $val + 1;
			@return $base * $step;
		} @else {
			@debug 'You used (#{$val}), you must use a unitless number.';
			@return 1000px;
		}

	// If all else fails, provide info about the function:
	} @else {
		@debug $info-vr-classic;
		@return 1000px;
	}

} // vr-classic



// ------------------------------------
// Baseline-Grid Vertical-Rhythm Function
// ------------------------------------
@function vr($val: base, $unit: rem) {
	// Calculate the base vertical-rhythm
	$base-ratio: convert_rem_ratio($base_line_height);

	$info-text: info(
	'vr', 'function', 'styles',
  $details: 'EXPERIMENTAL FUNCTION! DO NOT USE!
  Takes a unitless number and calculates the vertical-rhythm
  for the element using the rem/em equivalent to $base_line_height
  $base_line_height: #{$base_line_height} == (#{$base-ratio + $unit})
  - Params:
    - $val: Defaults to `base` ($base_line_height)
            Only accepts a unitless number
    - $unit: Defaults to `rem`. Also accepts `em`
  - SCSS Input:
    .element {
      line-height: vr(1);
    }
  - CSS Output:
    .element {
      line-height: 3.2rem;
    }
  ');
	@if $val == 'info' {
		@debug $info-text;
		@return 1000px;

	} @else if $val == 'base' or $val == 0 {
		@return $base-ratio + $unit;

	} @else if is-number($val) {
		$multiple: $baseline-grid * $val;
		$convert: convert_rem_ratio($multiple);
		@return ($base-ratio + $convert) + $unit;

	} @else {
		@debug 'Something went wrong. Pass `info` as the parameter for more info.';
		@return 1000px;
	}
}



// ===================================================================
// Tests
// ===================================================================

// @mixin __test_vr {
// 	@if $output_test_message { @debug '[TESTING] `vr`'; }
// 	/* `vr` ----------------------------- */
// 	.vr-tests {
// 		.null      { line-height: vr();     }
// 		.base      { line-height: vr(base); }
// 		.step-1    { line-height: vr(1);    }
// 		.step-2    { line-height: vr(2);    }
// 		.step-3    { line-height: vr(3);    }
// 		.step-half { line-height: vr(.5);   }
//
// 		.errors {
// 			.info         { line-height: vr(info); }
// 			.not-unitless { line-height: vr(2rem); }
// 		}
// 	}
// 	/* End `vr` ------------------------- */
// }
//
